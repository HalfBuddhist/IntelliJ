package com.lqw.lottery;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Scanner;import java.util.logging.Filter;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.apache.log4j.Logger;import org.htmlparser.Node;import org.htmlparser.NodeFilter;import org.htmlparser.Parser;import org.htmlparser.util.NodeList;import org.htmlparser.util.ParserException;import org.htmlparser.visitors.HtmlPage;public class Statistic7m {		private static Logger logger  = Logger.getLogger(Statistic7m.class);		private static ArrayList<IndexRecord> indexRecords = new ArrayList<IndexRecord>();		private static IndexRecord averageRecord = new IndexRecord();		public static NodeList getNodeListWithFilter(String url){		Parser parser = null;		NodeList nodeList = null;				//parse the html		try {			parser = new Parser(url);			parser.setEncoding("utf-8");			nodeList = parser.parse(new NodeFilter() {								@Override				public boolean accept(Node node) {										if (node.toHtml().trim().equals(""))					{						System.out.println("Found the null node in the filter.");						return true;					}					else						return false; 				}			});		} catch (ParserException e) {			e.printStackTrace();		}		return nodeList;	}	/**	 * @param args	 * ȫ�ֱ���	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		System.out.print("Please input the url:");		Scanner scanner = new Scanner(System.in);		String url = "http://1x2.7m.hk/list_gb.shtml?id=1127906";//		NodeList rt = getNodeListWithFilter(url);		NodeList rt = getNodeList(url);//		filterNullNode(rt);				logger.info(rt.toHtml());//		parseHtml(rt);		//		Statistic7m s500 = new Statistic7m();		// while ((url = scanner.next()) != null)		// {		// s500.startStatistic(url);		// System.out.print("\nPlease input the url:");		// }		//		//		// System.out.print("Thanks for using!");	}	public static NodeList getNodeList(String url) {			Parser parser = null;		HtmlPage visitor = null;		try {			parser = new Parser(url);			parser.setEncoding("utf-8");			visitor = new HtmlPage(parser);			parser.visitAllNodesWith(visitor);		} catch (ParserException e) {			e.printStackTrace();		}			NodeList nodeList = visitor.getBody();		return nodeList;	}	private static void parseHtml(NodeList rt) {		// TODO Auto-generated method stub		if (rt == null)			return;		for (int i = 0; i < rt.size(); i++) {			Node currentNode = rt.elementAt(i);						logger.info(currentNode.getText());						//get the index record			if (isIndexRecord(currentNode.getText()))			{				logger.info("Found the index record!");				IndexRecord indexRecord = new IndexRecord();								indexRecord.setFinalWinPei(Float.parseFloat(currentNode.getChildren().elementAt(0).toPlainTextString().trim()));				indexRecord.setFinalPKPei(Float.parseFloat(currentNode.getChildren().elementAt(1).toPlainTextString().trim()));				indexRecord.setFinalLosePei(Float.parseFloat(currentNode.getChildren().elementAt(2).toPlainTextString().trim()));				String tempString = currentNode.getChildren().elementAt(6).toPlainTextString().trim();				indexRecord.setReturnRate(Float.parseFloat(tempString.substring(0, tempString.length()-1)));								indexRecords.add(indexRecord);			}						//get the average value.			if (isAverageRecord(currentNode.getText()))			{				logger.info("Found the average record!");				averageRecord.setFinalWinPei(Float.parseFloat(currentNode.getChildren().elementAt(1).toPlainTextString().trim()));				averageRecord.setFinalPKPei(Float.parseFloat(currentNode.getChildren().elementAt(2).toPlainTextString().trim()));				averageRecord.setFinalLosePei(Float.parseFloat(currentNode.getChildren().elementAt(3).toPlainTextString().trim()));				String tempString = currentNode.getChildren().elementAt(7).toPlainTextString().trim();				averageRecord.setReturnRate(Float.parseFloat(tempString.substring(0, tempString.length()-1)));  			}						//recursively			parseHtml(rt.elementAt(i).getChildren());		} 	}	private static boolean isAverageRecord(String text) {		// TODO Auto-generated method stub		String regex = "tr style=\"background: #FFFF97; line-height: 20px;\".*";		Pattern p = Pattern.compile(regex);		Matcher m = p.matcher(text);		if (m.find()) {			return true;		}		return false;	}	private static boolean isIndexRecord(String text) {		// TODO Auto-generated method stub		String regex = "tr class=\"ltd(2|1)\".*";		Pattern p = Pattern.compile(regex);		Matcher m = p.matcher(text);		if (m.find()) {			return true;		}		return false;	}	private static void filterNullNode(NodeList rt){		if (rt == null)			return;			ArrayList<Node> nodeArrayList = new ArrayList<Node>();		for (int i = 0; i < rt.size(); i++) {			if (rt.elementAt(i).toHtml().trim().equals("")) {				System.out.println("Find null node in filter process.");				nodeArrayList.add(rt.elementAt(i));			}				scan(rt.elementAt(i).getChildren());		}				for (int i = 0; i < nodeArrayList.size(); i++)		{			rt.remove(nodeArrayList.get(i));		}	}	private static void scan(NodeList rt) {		if (rt == null)			return;			for (int i = 0; i < rt.size(); i++) {			if (rt.elementAt(i).toHtml().trim().equals("")) {				System.out.println("Find null node in scan process.");			}				scan(rt.elementAt(i).getChildren());		}	}}